m <- 50
n <- 2
lam <- 1
mu_r <- 2
mu_g <- 2
p <-  .25
restults<- gensecqueue(lam,n,m,p,mu_g,mu_r)
K <- 5
m <- 5
n <- 2
lam <- 1
mu_r <- 2
mu_g <- 2
p <-  .25
restults<- gensecqueue(lam,n,m,p,mu_g,mu_r)
K <- 5
m <- 5
n <- 2
lam <- 1
mu_r <- 2
mu_g <- 2
p <-  .25
restults<- gensecqueue(lam,n,m,p,mu_g,mu_r)
K <- 5
m <- 5
n <- 2
lam <- 1
mu_r <- 2
mu_g <- 2
p <-  .75
restults<- gensecqueue(lam,n,m,p,mu_g,mu_r)
K <- 5
m <- 5
n <- 2
lam <- 1
mu_r <- 2
mu_g <- 2
p <-  .75
restults<- gensecqueue(lam,n,m,p,mu_g,mu_r)
K <- 5
m <- 5
n <- 2
lam <- 1
mu_r <- 5
mu_g <- 7
p <-  .75
restults<- gensecqueue(lam,n,m,p,mu_g,mu_r)
#### test
K <- 5
m <- 5
n <- 2
lam <- 1
mu_r <- 5
mu_g <- 7
p <-  .75
lam_r <- lam*q
lam_g <- lam*p
matrix_size <- K +1
A<- calc_A_k(K,m,n,lam,lam_r, lam_g, mu_r, mu_g, p)
B<- Calc_B_ki(K,m,n,lam,lam_r, lam_g, mu_r, mu_g, p)
R <- calc_R(A,K,n)
R
B
A
B
G <- trunc_G(K,m,n, A,B,R)
G
G_trans <- t(G)
G
G_trans
G_trans <-last_row_G(G_trans, K, R,m)
G_trans
matrix_size <- K + 1
b <- matrix(0, nrow=((m+1)*matrix_size),ncol=1)
b <- rbind(b,1)
b
(m+1)*matrix_size)
(m+1)*matrix_size
matrix_size <- K + 1
b <- matrix(0, nrow=((m+1),ncol=1))
matrix_size <- K + 1
b <- matrix(0, nrow=((m+1),ncol=1))
matrix_size <- K + 1
b <- matrix(0, nrow=m+1,ncol=1)
b <- rbind(b,1)
b
m
K
G <- trunc_G(K,m,n, A,B,R)
G
K
B[3,6]
B[3,6,,]
K <- 13
r <- 10
s <- 5
lambda <- .2
p <-.9
lambda_aux <- (p-1) * lambda
lambda_p <- p * lambda
mu_p <-.4
mu_aux <-.5
A <- Calc_Am(K,s,r,lambda,lambda_aux,lambda_p,mu_p,mu_aux, p) R <- Calc_R(A, K,s)
A <- Calc_Am(K,s,r,lambda,lambda_aux,lambda_p,mu_p,mu_aux, p)
5*5
6*6
devtools::load_all(".")
K <- 5
m <- 5
n <- 2
lam <- 1
mu_r <- 5
mu_g <- 7
p <-  .75
lam_r <- lam*q
lam_g <- lam*p
matrix_size <- K +1
A<- calc_A_k(K,m,n,lam,lam_r, lam_g, mu_r, mu_g, p)
B<- Calc_B_ki(K,m,n,lam,lam_r, lam_g, mu_r, mu_g, p)
R <- calc_R(A,K,n)
G <- trunc_G(K,m,n, A,B,R)
G_trans <- t(G)
#Add in total probability equation
G_trans <-last_row_G(G_trans, K, R,m)
G
matrix_size <- (K) + 1
aij <- matrix(0, nrow=1,ncol=matrix_size)
a_irow_icol_jrow_jcol <- array(c(aij), c(m+1, m+1, matrix_size, matrix_size))
inner_col2 <- 0
A_count <- 0
for(i in (0:m)){
for (j in (0:m)){
k <- i - j + 1
if (m >= 0 && k >= 0){
a_irow_icol_jrow_jcol[i+1,j+1,,] <- B[k+1,i+1,,]
}
}
}
for(i in (0:(m-1)){
for(i in (0:(m-1))){
for (j in (0:m)){
k <- i - j + 1
if (m >= 0 && k >= 0){
a_irow_icol_jrow_jcol[i+1,j+1,,] <- B[k+1,i+1,,]
}
}
}
a_irow_icol_jrow_jcol
G
k
K
n
18/6
m
B[7,9,,]
B[7,10,,]
B[6,9,,]
K
M
m
n
B
#Calculate the truncated r by r Generator matrix as a_irow_icol_jrow_jcol
matrix_size <- (K) + 1
aij <- matrix(0, nrow=1,ncol=matrix_size)
a_irow_icol_jrow_jcol <- array(c(aij), c(m+1, m+1, matrix_size, matrix_size))
inner_col2 <- 0
A_count <- 0
for(i in (0:(m-1))){
for (j in (0:m)){
k <- i - j + 1
if (m >= 0 && k >= 0){
a_irow_icol_jrow_jcol[i+1,j+1,,] <- B[k+1,i+1,,]
}
}
}
G <- matrix(0, nrow = ((m + 1)*matrix_size), ncol = ((m + 1)*matrix_size ))
# Calculate the number of rows and columns in a_irow_icol_jrow_jcol
G_rows <- nrow(a_irow_icol_jrow_jcol)
G_cols <- ncol(a_irow_icol_jrow_jcol)
# Calculate the number of blocks in the reshaped matrix
blocks_rows <- matrix_size
blocks_cols <-  matrix_size
for (i in 1:(m+1)) {
for (j in 1:(m+1)) {
# Calculate the indices for block assignment
start_row <- (i - 1) * blocks_rows + 1
end_row <- i * blocks_rows
start_col <- (j - 1) * blocks_cols + 1
end_col <- j * blocks_cols
# Assign the block from a_irow_icol_jrow_jcol to a
G[start_row:end_row, start_col:end_col] <- a_irow_icol_jrow_jcol[i, j, , ]
}
}
G
matrix_size <- (K) + 1
aij <- matrix(0, nrow=1,ncol=matrix_size)
a_irow_icol_jrow_jcol <- array(c(aij), c(m+1, m+1, matrix_size, matrix_size))
inner_col2 <- 0
A_count <- 0
for(i in (0:(m-1))){
for (j in (0:m)){
k <- i - j + 1
if (m >= 0 && k >= 0){
a_irow_icol_jrow_jcol[i+1,j+1,,] <- B[k+1,i+1,,]
}
}
}
### summation for final row
row <- m+1
inner_col <- 1
A_count <- 0
for (col in 1:(m+1)){
r_row_sum <- 0
## X summation
if (col == (m-1)+1){
i <- 1
r_row_sum <- B[col+1,col+1,,]
while (i <= (K-n)){
r_row_sum <- r_row_sum + (matrix_power(R,i) %*% B[(i+2)+1,(m+i)+1,,])
i <- i +1
}
## Y summation
}else if(col == (m)+1){
i <- 1
r_row_sum <- B[col-1,col,,]
while (i <= (K-n)){
r_row_sum <- r_row_sum + (matrix_power(R,i) %*% B[(i+1)+1,(m+i)+1,,])
i <- i +1
}
r_row_sum <- r_row_sum + (matrix_power(R,K-n+1) %*% A[(K-n+2)+1,,])
### Z summation - As written in text ####
}else if (col == ((m+1) +1)){
i <- 1
r_row_sum <- 0 # A[(0)+1,,]
while (i <= (K-n+2)){
r_row_sum <- r_row_sum + (matrix_power(R,i-1) %*% A[(i)+1,,])
i <- i +1
}
}
a_irow_icol_jrow_jcol[row,col,,] <- r_row_sum
}
G <- matrix(0, nrow = ((m + 1)*matrix_size), ncol = ((m + 1)*matrix_size ))
# Calculate the number of rows and columns in a_irow_icol_jrow_jcol
G_rows <- nrow(a_irow_icol_jrow_jcol)
G_cols <- ncol(a_irow_icol_jrow_jcol)
# Calculate the number of blocks in the reshaped matrix
blocks_rows <- matrix_size
blocks_cols <-  matrix_size
for (i in 1:(m+1)) {
for (j in 1:(m+1)) {
# Calculate the indices for block assignment
start_row <- (i - 1) * blocks_rows + 1
end_row <- i * blocks_rows
start_col <- (j - 1) * blocks_cols + 1
end_col <- j * blocks_cols
# Assign the block from a_irow_icol_jrow_jcol to a
G[start_row:end_row, start_col:end_col] <- a_irow_icol_jrow_jcol[i, j, , ]
}
}
G
#### test
K <- 5
m <- 5
n <- 2
lam <- 1
mu_r <- 5
mu_g <- 7
p <-  .75
lam_r <- lam*q
lam_g <- lam*p
matrix_size <- K +1
A<- calc_A_k(K,m,n,lam,lam_r, lam_g, mu_r, mu_g, p)
B<- Calc_B_ki(K,m,n,lam,lam_r, lam_g, mu_r, mu_g, p)
R <- calc_R(A,K,n)
G <- trunc_G(K,m,n, A,B,R)
G
#Calculate the truncated r by r Generator matrix as a_irow_icol_jrow_jcol
matrix_size <- (K) + 1
aij <- matrix(0, nrow=1,ncol=matrix_size)
a_irow_icol_jrow_jcol <- array(c(aij), c(m+1, m+1, matrix_size, matrix_size))
inner_col2 <- 0
A_count <- 0
for(i in (0:(m-1))){
for (j in (0:m)){
k <- i - j + 1
if (m >= 0 && k >= 0){
a_irow_icol_jrow_jcol[i+1,j+1,,] <- B[k+1,i+1,,]
}
}
}
### summation for final row
row <- m+1
inner_col <- 1
A_count <- 0
for (col in 1:(m+1)){
r_row_sum <- 0
## X summation
if (col == (m-1)+1){
i <- 1
r_row_sum <- B[col+1,col+1,,]
while (i <= (K-n)){
r_row_sum <- r_row_sum + (matrix_power(R,i) %*% B[(i+2)+1,(m+i)+1,,])
i <- i +1
}
## Y summation
}else if(col == (m)+1){
i <- 1
r_row_sum <- B[col-1,col,,]
while (i <= (K-n)){
r_row_sum <- r_row_sum + (matrix_power(R,i) %*% B[(i+1)+1,(m+i)+1,,])
i <- i +1
}
r_row_sum <- r_row_sum + (matrix_power(R,K-n+1) %*% A[(K-n+2)+1,,])
### Z summation - As written in text ####
}else if (col == ((m+1) +1)){
i <- 1
r_row_sum <- 0 # A[(0)+1,,]
while (i <= (K-n+2)){
r_row_sum <- r_row_sum + (matrix_power(R,i-1) %*% A[(i)+1,,])
i <- i +1
}
}
a_irow_icol_jrow_jcol[row,col,,] <- r_row_sum
}
### restructure the matrix to solve
# Reshape the matrix to a 2-dimensional matrix of size (m+1)*matrix_size by (m+1)*matrix_size
# Assuming r and matrix_size are already defined
G <- matrix(0, nrow = ((m + 1)*matrix_size), ncol = ((m + 1)*matrix_size ))
# Calculate the number of rows and columns in a_irow_icol_jrow_jcol
G_rows <- nrow(a_irow_icol_jrow_jcol)
G_cols <- ncol(a_irow_icol_jrow_jcol)
# Calculate the number of blocks in the reshaped matrix
blocks_rows <- matrix_size
blocks_cols <-  matrix_size
for (i in 1:(m+1)) {
for (j in 1:(m+1)) {
# Calculate the indices for block assignment
start_row <- (i - 1) * blocks_rows + 1
end_row <- i * blocks_rows
start_col <- (j - 1) * blocks_cols + 1
end_col <- j * blocks_cols
# Assign the block from a_irow_icol_jrow_jcol to a
G[start_row:end_row, start_col:end_col] <- a_irow_icol_jrow_jcol[i, j, , ]
}
}
G
G <- trunc_G(K,n,m, A,B,R)
K <- 5
m <- 2
n <- 2
q <- .2
lam <- 1
mu_r <- 5
mu_g <- 7
p <- 1-q
lam_r <- lam*q
lam_g <- lam*p
matrix_size <- K +1
A<- calc_A_k(K,m,n,lam,lam_r, lam_g, mu_r, mu_g, p)
B<- Calc_B_ki(K,m,n,lam,lam_r, lam_g, mu_r, mu_g, p)
R <- calc_R(A,K,n)
G <- trunc_G(K,m,n, A,B,R)
G_trans <- t(G)
#Add in total probability equation
G_trans <-last_row_G(G_trans, K, R,m)
#RHS
matrix_size <- K + 1
b <- matrix(0, nrow=((m+1)*matrix_size),ncol=1)
b <- rbind(b,1)
# Solve over-defined system
expect_no_error(solve_prob_matrix(G_trans,b))
#### test
K <- 5
m <- 5
n <- 2
lam <- 1
mu_r <- 5
mu_g <- 7
p <-  .75
lam_r <- lam*q
lam_g <- lam*p
matrix_size <- K +1
A<- calc_A_k(K,m,n,lam,lam_r, lam_g, mu_r, mu_g, p)
B<- Calc_B_ki(K,m,n,lam,lam_r, lam_g, mu_r, mu_g, p)
R <- calc_R(A,K,n)
G <- trunc_G(K,n,m, A,B,R)
#Calculate the truncated r by r Generator matrix as a_irow_icol_jrow_jcol
matrix_size <- (K) + 1
aij <- matrix(0, nrow=1,ncol=matrix_size)
a_irow_icol_jrow_jcol <- array(c(aij), c(m+1, m+1, matrix_size, matrix_size))
inner_col2 <- 0
A_count <- 0
for(i in (0:(m-1))){
for (j in (0:m)){
k <- i - j + 1
if (m >= 0 && k >= 0  ){
a_irow_icol_jrow_jcol[i+1,j+1,,] <- B[k+1,i+1,,]
}
}
}
### summation for final row
row <- m+1
inner_col <- 1
A_count <- 0
for (col in 1:(m+1)){
r_row_sum <- 0
## X summation
if (col == (m-1)+1){
i <- 1
r_row_sum <- B[col+1,col+1,,]
while (i <= (K-n)){
r_row_sum <- r_row_sum + (matrix_power(R,i) %*% B[(i+2)+1,(m+i)+1,,])
i <- i +1
}
## Y summation
}else if(col == (m)+1){
i <- 1
r_row_sum <- B[col-1,col,,]
while (i <= (K-n)){
r_row_sum <- r_row_sum + (matrix_power(R,i) %*% B[(i+1)+1,(m+i)+1,,])
i <- i +1
}
r_row_sum <- r_row_sum + (matrix_power(R,K-n+1) %*% A[(K-n+2)+1,,])
### Z summation - As written in text ####
}else if (col == ((m+1) +1)){
i <- 1
r_row_sum <- 0 # A[(0)+1,,]
while (i <= (K-n+2)){
r_row_sum <- r_row_sum + (matrix_power(R,i-1) %*% A[(i)+1,,])
i <- i +1
}
}
a_irow_icol_jrow_jcol[row,col,,] <- r_row_sum
}
### restructure the matrix to solve
# Reshape the matrix to a 2-dimensional matrix of size (m+1)*matrix_size by (m+1)*matrix_size
# Assuming r and matrix_size are already defined
G <- matrix(0, nrow = ((m + 1)*matrix_size), ncol = ((m + 1)*matrix_size ))
# Calculate the number of rows and columns in a_irow_icol_jrow_jcol
G_rows <- nrow(a_irow_icol_jrow_jcol)
G_cols <- ncol(a_irow_icol_jrow_jcol)
# Calculate the number of blocks in the reshaped matrix
blocks_rows <- matrix_size
blocks_cols <-  matrix_size
for (i in 1:(m+1)) {
for (j in 1:(m+1)) {
# Calculate the indices for block assignment
start_row <- (i - 1) * blocks_rows + 1
end_row <- i * blocks_rows
start_col <- (j - 1) * blocks_cols + 1
end_col <- j * blocks_cols
# Assign the block from a_irow_icol_jrow_jcol to a
G[start_row:end_row, start_col:end_col] <- a_irow_icol_jrow_jcol[i, j, , ]
}
}
m
K <- 5
m <- 5
n <- 2
G <- trunc_G(K,n,m, A,B,R)
devtools::load_all(".")
lam_r <- lam*q
lam_g <- lam*p
matrix_size <- K +1
A<- calc_A_k(K,m,n,lam,lam_r, lam_g, mu_r, mu_g, p)
B<- Calc_B_ki(K,m,n,lam,lam_r, lam_g, mu_r, mu_g, p)
R <- calc_R(A,K,n)
G <- trunc_G(K,n,m, A,B,R)
G
gensecqueue(1,15,2,.75,1,2)
devtools::load_all(".")
devtools::load_all(".")
restults<- gensecqueue(lam,n,m,p,mu_g,mu_r)
devtools::load_all(".")
gensecqueue(1,15,2,.75,1,2)
prob_vec
gensecqueue(1,15,2,.75,1,2)
prob_vec
print(n)
sum(prob_vec)
size
K
gensecqueue(1,15,2,.75,1,2)
devtools::load_all(".")
gensecqueue(1,15,2,.75,1,2)
gensecqueue(1,5,2,.75,1,2)
gensecqueue(2.805333,5,2,.75,1,2)
gensecqueue(2.805333,5,2,1.0,1,2)
gensecqueue(2.805333,5,2,.99,1,2)
gensecqueue(2.805333,5,2,.9999,1,2)
gensecqueue(2.805333,5,2,.9999,300,2)
gensecqueue(2.805333,5,5,.9999,300,2)
gensecqueue(2.805333,5,6,.9999,300,2)
gensecqueue(2.805333,5,3,.9999,300,2)
gensecqueue(2.805333,5,2,.9999,300,2)
gensecqueue(2.805333,5,1,.9999,300,2)
gensecqueue(2.805333,1,1,.9999,300,2)
gensecqueue(2.805333,1,2,.9999,300,2)
gensecqueue(2.805333,1,2,.9999,5,2)
gensecqueue(2.805333,1,2,.9999,5,.5
)
gensecqueue(2.805333,1,2,.9999,.1,.5
)
gensecqueue(2.805333,1,2,.9999,.2,.5
)
gensecqueue(2.805333,1,2,.9999,1,.5)
gensecqueue(2.805333,1,2,.9999,2,.5)
gensecqueue(2.805333,1,2,.9999,3,.5)
gensecqueue(2.805333,1,5,.9999,3,.5)
gensecqueue(2.805333,1,4,.9999,3,.5)
gensecqueue(2.805333,1,3,.9999,3,.5)
