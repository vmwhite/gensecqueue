n <- 5 #general servers
rho <- c(.4,.6,.8)
p <-  c(.2,.4,.6,.8)
lam <- 1
## Expected results
rho_G <- c()
K <-c(8,8,8,8, 11,8,8,8, 13,8,8,8,
9,8,8,7, 14,9,8,8, "unstable",14,8,8,
11,8,8,8,">25", 13,8,8, "unstable", ">25", 11, 8)
rho_k<-  c()
for (auto_lanes in m){
for (rho_val in rho){
mu_r <- lam / (rho_val*(auto_lanes+n))
mu_g <- mu_r
for ( per in p){
# Solve
#expect_no_error(gensecqueue(lam,n,auto_lanes, per, mu_g, mu_r))
results<- gensecqueue(lam,n,auto_lanes,per,mu_g,mu_r)}}}
prob_vec <- calc_X(N,m,n,A,B,R)
prob_vec <- calc_X(N,m,n,A,B,R)
m <- c(1,3,5) #automatic servers
n <- 5 #general servers
rho <- c(.4,.6,.8)
p <-  c(.2,.4,.6,.8)
lam <- 1
## Expected results
rho_G <- c()
K <-c(8,8,8,8, 11,8,8,8, 13,8,8,8,
9,8,8,7, 14,9,8,8, "unstable",14,8,8,
11,8,8,8,">25", 13,8,8, "unstable", ">25", 11, 8)
rho_k<-  c()
for (auto_lanes in m){
for (rho_val in rho){
mu_r <- lam / (rho_val*(auto_lanes+n))
mu_g <- mu_r
for ( per in p){
# Solve
#expect_no_error(gensecqueue(lam,n,auto_lanes, per, mu_g, mu_r))
results<- gensecqueue(lam,n,auto_lanes,per,mu_g,mu_r)}}}
m
lambda
mu_g
mu_r
p
N
m<- 1
n<-5
rho<-.4
p <- .2
lam <- 1
mu_r <- lam / (rho*(m+n))
mu_g <- mu_r
mu_g
results<- gensecqueue(lam,n,m,p,mu_g,mu_r)
lambda_r <- lambda*p
lambda_g <- lambda*(1-p)
N <- max(m+1, N) # K > s
L_r_N_val <- 1
L_g_N_val <- 1
L_r_N_1 <- .0001
L_g_N_1 <-.0001
N <- N + 1
# caclulate input parameters
A <- calc_A_k(N,m,n,lambda,lambda_r,lambda_g,mu_r,mu_g, p)
R <- calc_R(A,N,n)
B <- calc_B_ki(N,m,n,lambda,lambda_r,lambda_g,mu_r,mu_g, p)
prob_vec <- calc_X(N,m,n,A,B,R)
m<- 1
n<-5
rho<-.4
p <- .2
lam <- 1
mu_r <- lam / (rho*(m+n))
mu_g <- mu_r
lambda_r <- lambda*p
lambda_r <- lam*p
lambda_g <- lam*(1-p)
N <- max(m+1, N) # K > s
lambda<- lam
N <- m+1
lambda_r <- lambda*p
lambda_g <- lambda*(1-p)
N <- max(m+1, N) # K > s
L_r_N_val <- 1
L_g_N_val <- 1
L_r_N_1 <- .0001
L_g_N_1 <-.0001
N <- N + 1
# caclulate input parameters
A <- calc_A_k(N,m,n,lambda,lambda_r,lambda_g,mu_r,mu_g, p)
R <- calc_R(A,N,n)
B <- calc_B_ki(N,m,n,lambda,lambda_r,lambda_g,mu_r,mu_g, p)
G <- trunc_G(N,n,m, A,B,R)
G <- trunc_G(N,n,m, A,B,R)
load_all()
load_all()
G <- trunc_G(N,n,m, A,B,R)
G
G_trans <- t(G)
#Add in total probability equation
G_trans <-last_row_G(G_trans, K, R,m)
G_trans <- t(G)
#Add in total probability equation
G_trans <-last_row_G(G_trans, N, R,m)
K < N
K <- N
N
matrix_size <- K + 1
b <- matrix(0, nrow=((m+1)*matrix_size),ncol=1)
b <- rbind(b,1)
# Solve over-defined system
X <- solve_prob_matrix(G_trans,b)
# add additional rows to X
X <- normalize_vector(X,matrix_size,R, tolerance,x_i_thres)
matrix_size <- K + 1
prob_vec <- calc_X(N,m,n,A,B,R)
prob_vec
#calculate new vaules and difference
matrix_size <- N+1
size <- length(prob_vec) / matrix_size
#calc L_r and L_q
L_r <- 0
L_g <- 0
size
m+1+1
if (m+1+1 > (size)){
for(i in (1):(m+1)){
for(j in (1):(N+1)){
#add one to for loops since R indexes at one
val <- (i-1)*prob_vec[i,j]
L_r <-  L_r + val
val_j <- ((j-1))*prob_vec[i,j]
L_g <- L_g + val_j
}
}
}else{
for(i in (m+1+1):(size)){
for(j in (n+1):(N+1)){
#add one to for loops since R indexes at one
val <- ((i-1))*prob_vec[i,j]
L_r <-  L_r + val
val_j <- ((j-1))*prob_vec[i,j]
L_g <- L_g + val_j
}
}
for(i in (1):(m+1)){
for(j in (1):(N+1)){
#add one to for loops since R indexes at one
val <- (i-1)*prob_vec[i,j]
L_r <-  L_r + val
val_j <- ((j-1))*prob_vec[i,j]
L_g <- L_g + val_j
}
}
}
if (m+1+1 >= (size)){
for(i in (1):(m+1)){
for(j in (1):(N+1)){
#add one to for loops since R indexes at one
val <- (i-1)*prob_vec[i,j]
L_r <-  L_r + val
val_j <- ((j-1))*prob_vec[i,j]
L_g <- L_g + val_j
}
}
}else{
for(i in (m+1+1):(size)){
for(j in (n+1):(N+1)){
#add one to for loops since R indexes at one
val <- ((i-1))*prob_vec[i,j]
L_r <-  L_r + val
val_j <- ((j-1))*prob_vec[i,j]
L_g <- L_g + val_j
}
}
for(i in (1):(m+1)){
for(j in (1):(N+1)){
#add one to for loops since R indexes at one
val <- (i-1)*prob_vec[i,j]
L_r <-  L_r + val
val_j <- ((j-1))*prob_vec[i,j]
L_g <- L_g + val_j
}
}
}
L_r <- 0
L_g <- 0
if (m+1+1 >= (size)){
for(i in (1):(m+1)){
for(j in (1):(N+1)){
#add one to for loops since R indexes at one
val <- (i-1)*prob_vec[i,j]
L_r <-  L_r + val
val_j <- ((j-1))*prob_vec[i,j]
L_g <- L_g + val_j
}
}
}else{
for(i in (m+1+1):(size)){
for(j in (n+1):(N+1)){
#add one to for loops since R indexes at one
val <- ((i-1))*prob_vec[i,j]
L_r <-  L_r + val
val_j <- ((j-1))*prob_vec[i,j]
L_g <- L_g + val_j
}
}
for(i in (1):(m+1)){
for(j in (1):(N+1)){
#add one to for loops since R indexes at one
val <- (i-1)*prob_vec[i,j]
L_r <-  L_r + val
val_j <- ((j-1))*prob_vec[i,j]
L_g <- L_g + val_j
}
}
}
L_r
L_g
L_r_N_val <- abs(L_r_N_1 - L_r) / L_r
L_g_N_val <- abs(L_g_N_1 - L_g) / L_g
print(paste0("N = ", N, ", L_r_diff = ", L_r_N_val, ", L_g_diff = ", L_g_N_val))
load_all()
test()
test()
test()
m<- 1
n<-5
rho<-.4
p <- .2
lam <- 1
mu_r <- lam / (rho*(m+n))
mu_g <- mu_r
results<- gensecqueue(lam,n,m,p,mu_g,mu_r)
n
n
results
source("~/GitHub/gensecqueue/R/gensecqueue.R")
load_all()
results<- solve_K(m,n,lam,mu_g,mu_r, p, N=m+1)
solve_K(m,n,lam,mu_g,mu_r, p, N=4)
m<- 1
n<-5
rho<-.4
p <- .2
lam <- 1
mu_r <- lam / (rho*(m+n))
mu_g <- mu_r
K <- 4
N <- 4
N <- N + 1
# caclulate input parameters
A <- calc_A_k(N,m,n,lambda,lambda_r,lambda_g,mu_r,mu_g, p)
R <- calc_R(A,N,n)
B <- calc_B_ki(N,m,n,lambda,lambda_r,lambda_g,mu_r,mu_g, p)
calc_X(N,m,n,A,B,R)
calc_X(N,m,n,A,B,R)
calc_X(N,m,n,A,B,R)
new_X
vec
m<- 1
n<-5
rho<-.4
p <- .2
lam <- 1
mu_r <- lam / (rho*(m+n))
mu_g <- mu_r
results<- solve_K(m,n,lam,mu_g,mu_r, p, N=m+1)
vec
vec
X
G_trans
b
solve_prob_matrix(G_trans,b)
matrix_size
G_trans
(m+1)*matrix_size)
(m+1)*matrix_size
rbind(b,0,matrix_size)
rbind(b,0)
b
G_trans
rbind(G_trans,diag((m+1)*matrix_size))
#add non-negativity
G_trans <- rbind(G_trans,diag((m+1)*matrix_size))
for ( i in (1:((m+1)*matrix_size) )){
b <- rbind(b,0)
}
G_trans
b
load_all()
rm(list = c("gensecqueue"))
load_all()
load_all()
test()
m<- 1
n<-5
rho<-.4
p <- .2
lam <- 1
mu_r <- lam / (rho*(m+n))
mu_g <- mu_r
m<- 1
n<-5
rho<-.4
p <- .2
lam <- 1
mu_r <- lam / (rho*(m+n))
mu_g <- mu_r
results<- solve_K(m,n,lam,mu_g,mu_r, p, N=m+1)
prob_vec
K
X
vec
1 - sum(vec, na.rm=TRUE)) > tolerance
1 - sum(vec, na.rm=TRUE) > tolerance
1 - sum(vec, na.rm=TRUE)
sum(vec, na.rm=TRUE)
vec
m<- 1
n<-5
rho<-.4
p <- .2
lam <- 1
mu_r <- lam / (rho*(m+n))
mu_g <- mu_r
results<- solve_K(m,n,lam,mu_g,mu_r, p, N=m+1)
N
G_trans
B
B
b
G_trans
load_all()
m<- 1
n<-5
rho<-.4
p <- .2
lam <- 1
mu_r <- lam / (rho*(m+n))
mu_g <- mu_r
results<- solve_K(m,n,lam,mu_g,mu_r, p, N=m+1)
vec
N
load_all()
load_all()
load_all()
load_all()
m<- 1
n<-5
rho<-.4
p <- .2
lam <- 1
mu_r <- lam / (rho*(m+n))
mu_g <- mu_r
results<- solve_K(m,n,lam,mu_g,mu_r, p, N=m+1)
X
all(X < 0) == FALSE
all(X < 0)
m<- 1
n<-5
rho<-.4
p <- .2
lam <- 1
mu_r <- lam / (rho*(m+n))
mu_g <- mu_r
results<- solve_K(m,n,lam,mu_g,mu_r, p, N=m+1)
N
X
load_all()
m<- 1
n<-5
rho<-.4
p <- .2
lam <- 1
mu_r <- lam / (rho*(m+n))
mu_g <- mu_r
results<- solve_K(m,n,lam,mu_g,mu_r, p, N=m+1)
N
X
nnls(G_trans, b, cd_maxit = 100L, cd_tol = 1e-08, fast_nnls = FALSE, L1 = 0)
install.packages("nnls")
nnls(G_trans, b, cd_maxit = 100L, cd_tol = 1e-08, fast_nnls = FALSE, L1 = 0)
library(nnls)
nnls(G_trans, b, cd_maxit = 100L, cd_tol = 1e-08, fast_nnls = FALSE, L1 = 0)
X <- matrix(runif(100), 10, 10)
a <- crossprod(X)
b <- crossprod(X, runif(10))
unconstrained_soln <- solve(a, b)
nonneg_soln <- nnls(a, b)
unconstrained_err <- mean((a %*% unconstrained_soln - b)^2)
nonnegative_err <- mean((a %*% nonneg_soln - b)^2)
unconstrained_soln
a
(a %*% unconstrained_soln - b)^2
mean((a %*% unconstrained_soln - b)^2)
unconstrained_err
nonnegative_err
nnls(a, b)
nnls(a, b)$X
nnls(a, b)$x
nonnegative_err <- mean((a %*% nonneg_soln$x - b)^2)
all.equal(solve(a, b), nnls(a, b))
# example adapted from multiway::fnnls example 1
X <- matrix(1:100,50,2)
y <- matrix(101:150,50,1)
beta <- solve(crossprod(X)) %*% crossprod(X, y)
beta
beta <- nnls(crossprod(X), crossprod(X, y))
beta
all.equal(solve(a, b), nnls(a, b)$x)
solve(a, b)
nnls(a, b)$x
t(nnls(a, b)$x)
## Not run:
# compare solution to base::solve for a random system
X <- matrix(runif(100), 10, 10)
a <- crossprod(X)
b <- crossprod(X, runif(10))
unconstrained_soln <- solve(a, b)
nonneg_soln <- t(nnls(a, b)$x)
unconstrained_err <- mean((a %*% unconstrained_soln - b)^2)
nonnegative_err <- mean((a %*% nonneg_soln - b)^2)
nonneg_soln
a
unconstrained_soln
## Not run:
# compare solution to base::solve for a random system
X <- matrix(runif(100), 10, 10)
a <- crossprod(X)
b <- crossprod(X, runif(10))
unconstrained_soln <- solve(a, b)
nonneg_soln <- nnls(a, b)$x
unconstrained_err <- mean((a %*% unconstrained_soln - b)^2)
nonnegative_err <- mean((a %*% nonneg_soln - b)^2)
unconstrained_err
nonnegative_err
all.equal(solve(a, b), t(nnls(a, b)$x))
# example adapted from multiway::fnnls example 1
X <- matrix(1:100,50,2)
y <- matrix(101:150,50,1)
beta <- solve(crossprod(X)) %*% crossprod(X, y)
beta
beta <- nnls(crossprod(X), crossprod(X, y))$x
beta
m<- 1
n<-5
rho<-.4
p <- .2
lam <- 1
mu_r <- lam / (rho*(m+n))
mu_g <- mu_r
results<- solve_K(m,n,lam,mu_g,mu_r, p, N=m+1)
X
nnls(G_trans, b, cd_maxit = 100L, cd_tol = 1e-08, fast_nnls = FALSE, L1 = 0)
load_all()
m<- 1
n<-5
rho<-.4
p <- .2
lam <- 1
mu_r <- lam / (rho*(m+n))
mu_g <- mu_r
results<- solve_K(m,n,lam,mu_g,mu_r, p, N=m+1)
nnls(G_trans, b)$x
sum(X)
X<- nnls(G_trans, b)$x
sum(X)
load_all()
m<- 1
n<-5
rho<-.4
p <- .2
lam <- 1
mu_r <- lam / (rho*(m+n))
mu_g <- mu_r
results<- solve_K(m,n,lam,mu_g,mu_r, p, N=m+1)
m<- 1
n<-5
rho<-.4
p <- .2
lam <- 1
mu_r <- lam / (rho*(m+n))
mu_g <- mu_r
results<- solve_K(m,n,lam,mu_g,mu_r, p, N=4)
nnls(G, b)$x
results
load_all()
m<- 1
n<-5
rho<-.4
p <- .2
lam <- 1
mu_r <- lam / (rho*(m+n))
mu_g <- mu_r
results<- solve_K(m,n,lam,mu_g,mu_r, p, N=4)
X
X
t(X)
matrix(X)
load_all()
m<- 1
n<-5
rho<-.4
p <- .2
lam <- 1
mu_r <- lam / (rho*(m+n))
mu_g <- mu_r
results<- solve_K(m,n,lam,mu_g,mu_r, p, N=4)
X
X
load_all()
